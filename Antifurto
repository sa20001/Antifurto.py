import paho.mqtt.client as mqtt
import paho.mqtt.publish as publish

topic_base = 'afp/mr/home/'
device_id = "SV"
broker_server = 'broker.hivemq.com'

door_sensor = ""
server_response = ""
win2_sensor = ""
win3_sensor = ""
win4_sensor = ""
continuos_state = True


def callback_connessione(client, userdata, flags, rc):
    print("Connected to the server: \"", broker_server + " \" with result code", str(rc))
    # sottoscrivo gli argomenti di interesse
    client.subscribe(topic_base + "#")


def callback_disconnessione(client, userdata, rc):
    if rc != 0:
        print('Disconnesso')


def callback_ricezione(client, userdata, message):
    print(userdata)
    print("Messagge received on " + message.topic + " with content " + str(message.payload))
    global server_response
    win1_sensor = message.payload


client = mqtt.Client(client_id="AFP")
client.on_connect = callback_connessione  # Define the connect callback implementation.
client.on_disconnect = callback_disconnessione
client.on_message = callback_ricezione  # Called when a message has been received on a topic that the client subscribes
client.connect(broker_server)
client.loop_forever()  # permette di rimanere connesso

publish.single(topic_base + device_id, payload="ON", hostname=broker_server)
